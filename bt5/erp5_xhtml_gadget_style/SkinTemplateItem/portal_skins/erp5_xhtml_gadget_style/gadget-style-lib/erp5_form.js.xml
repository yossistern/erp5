<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts63852017.7</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>erp5_form.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\n
  Form field renderer.\n
  Note: This is an ERP5 form implementation for the moment.\n
*/\n
\n
var ERP5Form = ( function () {\n
  \n
  var CURRENT_FORM_ID = "";\n
  \n
  return {\n
\n
          // elements marked with this class can be serialized to server\n
          SERIALIZE_ABLE_CLASS_NAME: "serialize-able",\n
\n
          getCurrentFormId: function () {\n
                            /* Get current form ID (return hard coded one for now) */\n
                            return CURRENT_FORM_ID;\n
          },\n
\n
          setCurrentFormId: function (form_id) {\n
                            /* Set current form ID (return hard coded one for now) */\n
                            CURRENT_FORM_ID = form_id;\n
          },\n
\n
          getFieldId: function(field_id) {\n
                      /* Generate local form field id */\n
                      return "field_" + field_id;\n
          },\n
\n
          updateField: function (dom, field_dict) {\n
                      /* General purpose field updater */\n
                      var editable;\n
                      editable = Boolean(field_dict.editable);\n
                      if (editable){\n
                        dom.val(field_dict.value);}\n
                      else{\n
                        // if field is not editable just show its value\n
                        dom.replaceWith(field_dict.value);\n
                      }\n
          },\n
\n
          addOptionTagList: function (select_dom, item_list, field_value) {\n
                      /*\n
                      * Update select like dom element\n
                      */\n
                      $.each(item_list, function (index, value){\n
                          if(value[1]===field_value) {\n
                            select_dom.append(\'<option selected value="\' + value[1] + \'">\'  + value[0] + \'</option>\');\n
                          }\n
                          else {\n
                            select_dom.append(\'<option value="\' + value[1] + \'">\'  + value[0] + \'</option>\');\n
                          }\n
                        });\n
          },\n
\n
          addOptionTagDictList: function (select_dom, item_list) {\n
                      /*\n
                      * Update select like dom element now using dict in this format:\n
                      * [{\'selected\': True, \'id\': \'en\', \'title\': \'English\'}, \n
                      *  {\'selected\': False, \'id\': \'fr\', \'title\': \'French\'}]\n
                      */\n
                      $.each(item_list, function (index, value){\n
                          if(value.selected===true) {\n
                            select_dom.append(\'<option selected value="\' + value.id + \'">\'  + value.title + \'</option>\');\n
                          }\n
                          else {\n
                            select_dom.append(\'<option value="\' + value.id + \'">\'  + value.title + \'</option>\');\n
                          }\n
                        });\n
          },\n
\n
          BaseInputField: function (field_id, field_dict) {\n
                      /* HTML based input field */\n
                      var dom, display_width;\n
                      dom = $("[name=" + this.getFieldId(field_id) + "]");\n
                      this.updateField(dom, field_dict);\n
                      display_width = field_dict.display_width;\n
                      if (display_width){\n
                        dom.attr("size", display_width);}\n
                      return dom;\n
          },\n
\n
          EditorField: function (field_id, field_dict) {\n
                      /* HTML based input field */\n
                      var dom;\n
                      dom = $("#" + this.getFieldId(field_id));\n
                      this.updateField(dom, field_dict);\n
                      return dom;\n
          },\n
\n
          ListField: function (field_id, field_dict) {\n
                      /* Select field */\n
                      var field_value, select_dom;\n
                      field_value = field_dict.value;\n
                      select_dom = $("select[name=" + this.getFieldId(field_id) + "]");\n
                      this.addOptionTagList(select_dom, field_dict.items, field_value);\n
                      return select_dom;\n
          },\n
\n
          ParallelListField: function (field_id, field_dict) {\n
                      /* mutiple select fields */\n
                      var tag_name = "subfield_field_" + field_id + "_default",\n
                          initial_select_dom = $("select[name="+ tag_name + "\\\\:list]"),\n
                          gadget = initial_select_dom.parent("div[data-gadget]"),\n
                          new_select_id;\n
                      // render first value in initial select box\n
                      ERP5Form.addOptionTagList(initial_select_dom, field_dict.items, field_dict.value[0]);\n
\n
                      // render all other elements\n
                      $.each(field_dict.value, function (index, index_value) {\n
                        if (index !== 0) {\n
                          // we need to create dynamically a select box for all element except first\n
                          new_select_id = \'parallel_\' + field_id + index;\n
                          gadget.append(\'<br/><select class="serialize-able" name=\' + tag_name + \':list \' + \'id=\' + new_select_id + \'></select>\');\n
                          ERP5Form.addOptionTagList($("#"+new_select_id), field_dict.items, index_value);\n
                        }\n
                      });\n
\n
                      // add a new select with all values under main one with already selected \n
                      if (field_dict.value.length > 0) {\n
                        // we need to add another select if initial one is empty\n
                        new_select_id = \'parallel_last\' + field_id;\n
                        gadget.append(\'<br/><select class="dynamic serialize-able" name=\' + tag_name + \':list \' + \'id=\' + new_select_id + \'></select>\');\n
                        ERP5Form.addOptionTagList($("#"+new_select_id), field_dict.items, \'\');\n
                      }\n
                      return initial_select_dom;\n
          },\n
\n
          CheckBoxField: function (field_id, field_dict) {\n
                      /* CheckBoxField field */\n
                      var checked, checkbox_dom;\n
                      checked = Boolean(field_dict.value);\n
                      checkbox_dom = $("input[name=" + this.getFieldId(field_id) + "]");\n
                      if (checked) {\n
                          checkbox_dom.attr(\'checked\', true);\n
                      }\n
                      return checkbox_dom;\n
          },\n
\n
          TextAreaField: function (field_id, field_dict) {\n
                      /* TextArea field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          StringField: function (field_id, field_dict) {\n
                      /* String field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          IntegerField: function (field_id, field_dict) {\n
                      /* Int field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          PasswordField: function (field_id, field_dict) {\n
                      /* PasswordField field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          DateTimeField: function (field_id, field_dict) {\n
                      /* DateTimeField field */\n
                      var date, dom, date_format;\n
                      dom = $("[name=" + this.getFieldId(field_id) + "]");\n
                      date = field_dict.value;\n
                      date_format = field_dict[\'format\'];\n
                      if (date_format==="dmy") {\n
                        // XXX: support more formats\n
                        date_format = \'dd/mm/yy\';\n
                      }\n
                      date = new Date(date);\n
                      dom.datepicker({ dateFormat: date_format});\n
                      dom.datepicker(\'setDate\', date);\n
                      return dom;\n
          },\n
\n
          EmailField: function (field_id, field_dict) {\n
                      /* Email field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          FloatField: function (field_id, field_dict) {\n
                      /* Float field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          FormBox: function (field_id, field_dict) {\n
                      /* FormBox field */\n
                      // XXX: implement it to read all values and render properly\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          RelationStringField: function (field_id, field_dict) {\n
                      /* Relation field */\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          MultiRelationStringField: function (field_id, field_dict) {\n
                      /* MultiRelationStringField field */\n
                      // XXX: support multiple values\n
                      return this.BaseInputField(field_id, field_dict);\n
          },\n
\n
          ImageField:  function (field_id, field_dict) {\n
                      /* Image field */\n
                      var dom;\n
                      dom = $("img[name=" + this.getFieldId(field_id) + "]");\n
                      // XXX: image field should return details like quality, etc ...\n
                      dom.attr("src", field_dict.value + "?quality=75.0&display=thumbnail&format=png");\n
          },\n
\n
          ListBox:  function (field_id, field_dict) {\n
                      /*\n
                       * Listbox field rendered at server\n
                       */\n
                      var listbox_id, navigation_id, listbox_table, current_form_id, listbox_dict,\n
                          listbox_data_url, colModel, column_title_list;\n
                      listbox_id = "field_" + field_id;\n
                      navigation_id = listbox_id + "_pager";\n
                      listbox_table = $("#"+listbox_id + "_table");\n
                      current_form_id = this.getCurrentFormId();\n
                      listbox_dict = field_dict.listbox;\n
                      listbox_data_url = listbox_dict.listbox_data_url;\n
                      $("#" + listbox_id + "_field").html(listbox_dict["listbox_html"]);\n
                      return\n
          },\n
\n
          ListBoxJavaScript:  function (field_id, field_dict) {\n
                      /*\n
                       * Listbox field rendered entirely at client side using jqgrid plugin\n
                       */\n
                      var listbox_id, navigation_id, listbox_table, current_form_id, listbox_dict,\n
                          listbox_data_url, colModel, column_title_list;\n
                      listbox_id = "field_" + field_id;\n
                      navigation_id = listbox_id + "_pager";\n
                      listbox_table = $("#"+listbox_id);\n
                      current_form_id = this.getCurrentFormId();\n
                      listbox_dict = field_dict.listbox;\n
                      listbox_data_url = listbox_dict.listbox_data_url;\n
                      colModel = [];\n
                      column_title_list = [];\n
                      $.each(listbox_dict.columns,\n
                              function(i, value){\n
                                var index, title, column;\n
                                index = value[0];\n
                                title = value[1];\n
                                column_title_list.push(title);\n
                                column = {\'name\': index,\n
                                          \'index\': index,\n
                                          \'width\': 185,\n
                                          \'align\': \'left\'};\n
                                colModel.push(column);\n
                      });\n
\n
                      listbox_table.jqGrid({url:listbox_data_url + \'?form_id=\' + current_form_id + \'&amps;listbox_id=\' + field_id,\n
                                    datatype: "json",\n
                                    colNames:  column_title_list,\n
                                    colModel: colModel,\n
                                    rowNum: listbox_dict.lines,\n
                                    pager: \'#\'+navigation_id,\n
                                    sortname: \'id\',\n
                                    viewrecords: true,\n
                                    sortorder: "desc",\n
                                    loadError : function(xhr, textStatus, errorThrown)  {\n
                                                  // XXX: handle better than just alert.\n
                                                  alert("Error occurred during getting data from server.");\n
                                                  },\n
                                    cmTemplate: {sortable:false}, // XXX: until we get list of sortable columns from server\n
                                    caption: field_dict.title});\n
                      listbox_table.jqGrid(\'navGrid\', \'#\'+navigation_id, {edit:false,add:false,del:false});\n
                      return listbox_table;\n
          },\n
\n
          update: function(data) {\n
                      /* Update form values */\n
                      $.each(data.form_data,\n
                            function(field_id, field_dict){\n
                                var type=field_dict.type,\n
                                    dom;\n
                                if(ERP5Form.hasOwnProperty(type)){\n
                                  dom = ERP5Form[type](field_id, field_dict);\n
                                }\n
\n
                                // add a class that these fields are editable so asJSON\n
                                // can serialize for for sending to server\n
                                if (dom!==undefined && dom!==null && field_dict.editable){\n
                                  dom.addClass(ERP5Form.SERIALIZE_ABLE_CLASS_NAME);\n
                                }\n
\n
                                // mark required fields visually\n
                                if (field_dict.required){\n
                                  //dom.parent().parent().parent().children("label").css("font-weight", "bold");}\n
                                  dom.parent().parent().parent().addClass("required-field");\n
                                }\n
\n
                              });\n
          },\n
\n
          save: function(){\n
                      /* save form to server*/\n
                      var form_value_dict, converted_value;\n
                      form_value_dict = {};\n
                      $("." + ERP5Form.SERIALIZE_ABLE_CLASS_NAME).each(function(index){\n
                        // DOM can change values, i.e. alter checkbox (on / off)\n
                        var element = $(this),\n
                            name = element.attr("name"),\n
                            value = element.val(),\n
                            type = element.attr("type"),\n
                            element_class = element.attr("class");\n
\n
                        if (type === "checkbox") {\n
                          value = element.is(":checked");\n
                          if (value === true) {\n
                            converted_value=1;\n
                          }\n
                          if (value === false) {\n
                            converted_value=0;\n
                          }\n
                          value = converted_value;\n
                        }\n
                        if (element_class.indexOf("hasDatepicker") !== -1) {\n
                            // backend codes expects that date object is represented by\n
                            // three separate request parameters so created them here.\n
                            // XXX: we assume format is dd/mm/YYYY so read it from DateTimeGadget for this field\n
                            // which means we now must be able get hold of gadget and read it from there where\n
                            // fist it should be initialized!)\n
                            form_value_dict["subfield_" + name + "_year"] = value.substr(6,4);\n
                            form_value_dict["subfield_" + name + "_month"] = value.substr(3,2);\n
                            form_value_dict["subfield_" + name + "_day"] = value.substr(0,2);\n
                        }\n
\n
                        // XXX: how to handle file uploads ?\n
\n
                        // some values end with :list and we need to collect them all\n
                        if (/:list$/.test(name)) {\n
                          if (form_value_dict[name] === undefined) {\n
                            // init it\n
                            form_value_dict[name] = [];\n
                            //console.log("init", name);\n
                          }\n
                          form_value_dict[name].push(value);\n
                          //console.log("set", name, form_value_dict[name]);\n
                        }\n
                        else {\n
                          // single value\n
                          form_value_dict[name] = value;\n
                        }\n
                      });\n
                      //console.log(form_value_dict);\n
\n
                      // add form_id as we need to know structure we\'re saving at server side\n
                      form_value_dict.form_id = ERP5Form.getCurrentFormId();\n
\n
                      // validation happens at server side\n
                      $.ajax({url:\'Form_save\',\n
                              data: form_value_dict,\n
                              dataType: "json",\n
                              // it\'s important for Zope to have traditional way of encoding an URL\n
                              traditional: 1,\n
                              success: function (data) {\n
                                var field_errors;\n
                                field_errors = data.field_errors;\n
                                if (field_errors!==undefined){\n
                                  //console.log(field_errors);\n
                                  $.each(field_errors, function(index, value){\n
                                      var dom, field;\n
                                      dom = $("[name=" + ERP5Form.getFieldId(index) + "]");\n
                                      dom.addClass("validation-failed");\n
                                      field = dom.parent().parent();\n
                                      if (field.children("span.error").length > 0){\n
                                        // just update message\n
                                        field.children("span.error").html(value);}\n
                                      else{\n
                                        // no validation error message exists\n
                                        field.append(\'<span class="error">\' + value + \'</span>\');}\n
                                    }\n
                                  );}\n
                                else{\n
                                  // validation OK at server side\n
                                  $("span.error").each(function(index) {\n
                                    // delete validation messages\n
                                    var element;\n
                                    element = $(this);\n
                                    element.remove();\n
                                    // XXX: remove all rendered in red input classes\n
                                    $(".validation-failed").each(function () {\n
                                      $(this).removeClass("validation-failed");\n
                                    });\n
                                  });\n
                                  // show a fading portal_status_message\n
                                  RenderJs.GadgetIndex.getGadgetById(\'portal_status_message\').showMessage("Saved", 1000);\n
                                }\n
                              }});\n
          },\n
\n
        onTabClickHandler: function (form_id) {\n
          /*\n
           * When a tab gets clicked change url (part after \'#\') so router can detect\n
            change and load proper gadget.\n
            This function preserves all URL arguments.\n
          */\n
          window.location = window.location.toString().split(\'#\')[0] + \'#/\'+form_id + \'/\';\n
          return false;\n
        },\n
\n
        openFormInTabbularGadget: function (container_id, form_id) {\n
          /*\n
          * Open a new tab containing an ERP5 form using RenderJs\'s TabbularGadget API.\n
          */\n
          if (RenderJs.GadgetIndex.getGadgetById(\'gadget-\' + form_id) === undefined) {\n
            // do not load already existing tab gadget\n
            RenderJs.TabbularGadget.addNewTabGadget(\n
              container_id,\n
              \'gadget-\' + form_id,\n
              form_id + \'/Form_asRenderJSGadget\',\n
              \'ERP5Form.update\',\n
              \'Form_asJSON?form_id=\' + form_id);;\n
            RenderJs.TabbularGadget.toggleVisibility($(\'#\' + form_id));\n
            ERP5Form.setCurrentFormId(form_id);\n
            // when all gadgets are loaded adjust left and right side of forms to have same height\n
            RenderJs.bindReady(function () {\n
              setTimeout(function() {\n
                var left_height = $(\'fieldset.left\').height(),\n
                    right_height = $(\'fieldset.right\').height();\n
                  if (right_height <= left_height) {\n
                    $(\'fieldset.right\').height(left_height);\n
                  }\n
                  else {\n
                    $(\'fieldset.left\').height(right_height);\n
                  }\n
                }, 500);\n
            });\n
          }\n
        }\n
\n
  }} ());\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>21463</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
